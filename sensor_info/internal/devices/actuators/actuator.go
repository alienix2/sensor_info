package devices

import (
	"log"

	"github.com/google/uuid"
	common "mattemoni.sensor_info/internal/devices/common"
)

type Actuator struct {
	formatter common.DeviceFormatterStrategy
	name      string
	id        string
	status    string
	unit      string
	minPower  float64
	maxPower  float64
}

func (a *Actuator) GetID() string {
	return a.id
}

func (a *Actuator) GetName() string {
	return a.name
}

func (a *Actuator) GetStatus() string {
	return a.status
}

func (a *Actuator) GetRange() (float64, float64) {
	return a.minPower, a.maxPower
}

func (a *Actuator) SetStatus(status string) {
	a.status = status
}

func (a *Actuator) FormatData() (string, error) {
	return a.formatter.Format(0, a.name, a.unit, a.id)
}

type ActuatorOption func(*Actuator)

func WithActuatorName(name string) ActuatorOption {
	return func(a *Actuator) {
		a.name = name
	}
}

func WithActuatorID(id string) ActuatorOption {
	return func(a *Actuator) {
		a.id = id
	}
}

func WithActuatorRange(minPower, maxPower float64) ActuatorOption {
	return func(a *Actuator) {
		a.minPower = minPower
		a.maxPower = maxPower
	}
}

func WithActuatorUnit(unit string) ActuatorOption {
	return func(a *Actuator) {
		a.unit = unit
	}
}

func NewActuator(opts ...ActuatorOption) *Actuator {
	actuator := &Actuator{
		name:      "DefaultActuator",
		id:        "actuator_autogenerated-" + uuid.New().String(),
		status:    "idle",
		minPower:  0,
		maxPower:  100,
		unit:      "unit",
		formatter: &common.RawFormatterStrategy{},
	}

	for _, opt := range opts {
		opt(actuator)
	}

	log.Printf("Actuator initialized: %+v\n", actuator)

	return actuator
}
